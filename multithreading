import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.ReentrantLock;

public class CinemaBooking implements Runnable {
  
  private static final ReentrantLock lock = new ReentrantLock();
  private static final int[] SeatNo = new int[30];
  private static final Scanner input = new Scanner(System.in);
  private String CustomerName;

  public CinemaBooking(String CustomerName) {
    this.CustomerName = CustomerName;
  }

  public void run() {
    lock.lock();
    try {
      System.out.printf("Welcome %s! Please have a look at the seating plan.\n\n", CustomerName);
      //... continue with the rest of your code here
      //... replace all the `input.nextLine()` and `input.nextInt()` calls with hard-coded values
      //... because Scanner doesn't work well with multithreading
    } finally {
      lock.unlock();
    }
  }

  public static void main(String[] args) {
    ExecutorService executorService = Executors.newFixedThreadPool(5);
    for (int i = 0; i < 5; i++) {
      executorService.submit(new CinemaBooking("Customer " + (i + 1)));
    }
    executorService.shutdown();
  }
}
